buildscript {

    ext.dependenciesFilePath = "$rootDir/dependencies.gradle"
    ext.versionsFilePath = "$rootDir/versions.gradle"

    apply(from: versionsFilePath)
    apply(from: dependenciesFilePath)

    repositories {
        google()
        maven { url("https://plugins.gradle.org/m2/") }
        jcenter {
            content {
                // just allow to include kotlinx projects
                // detekt needs 'kotlinx-html' for the html report
                includeGroup "org.jetbrains.kotlinx"
            }
        }
    }

    dependencies {
        classpath(gradlePlugins.android)
        classpath(gradlePlugins.kotlin)
        classpath(gradlePlugins.versions)
        classpath(gradlePlugins.jacoco)
        classpath(gradlePlugins.firebase)
        classpath(gradlePlugins.androidJunit5)
    }
}

plugins {
    id "io.gitlab.arturbosch.detekt" version '1.7.0-beta1'
}

detekt {
    failFast = false
    buildUponDefaultConfig = true
    autoCorrect = true
    config = files("$rootDir/code_quality_tools/detekt_config.yml")
    reports {
        html {
            enabled = true
            destination = file("$rootDir/reports/detekt/${project.name}_report.html")
        }
    }
    idea {
        path = "$rootDir/.idea"
        codeStyleScheme = "$rootDir/.idea/idea-code-style.xml"
        inspectionsProfile = "$rootDir/.idea/inspect.xml"
        report = "project.projectDir/reports"
        mask = "*.kt"
    }
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

allprojects {

//    apply from: "$rootDir/code_quality_tools/detekt.gradle.kts"
    apply plugin: "com.github.ben-manes.versions"

    repositories {
        google()
        maven { url "https://jitpack.io" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }

    tasks.withType(JavaCompile).all {
        options.compilerArgs += [
                '-Adagger.formatGeneratedSource=disabled',
                '-Adagger.gradle.incremental=enabled'
        ]
    }

    afterEvaluate {
        extensions.findByName('kapt')?.arguments {
            arg("dagger.formatGeneratedSource", "disabled")
        }
    }
}

subprojects { project ->

    apply from: "$rootDir/code_quality_tools/jacoco.gradle"

    afterEvaluate {
        // This allows us see tests execution progress in the output on the CI.
        android.testOptions.unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                exceptionFormat 'full'
            }
        }

        android.kotlinOptions {
            jvmTarget = "1.8"
        }

        android.compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        android.lintOptions {
            warningsAsErrors true
            abortOnError false

            // App does not have deep linking
            disable 'GoogleAppIndexingWarning'
            // Okio references java.nio that does not presented in Android SDK
            disable 'InvalidPackage'
            // Warning for kotlin flows
            disable 'UnsafeExperimentalUsageError', 'UnsafeExperimentalUsageWarning'

            // View binding issues for unused resources and ids
            // disable('UnusedResources')
            // disable('UnusedIds')

            checkAllWarnings true
            showAll true
            explainIssues true

            xmlReport false

            htmlOutput file("reports/${project.name}_lint_report.html")
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task syncConfig(type: Exec) {
    commandLine 'sh', "$rootDir/ci_config/upload_config.sh"
}